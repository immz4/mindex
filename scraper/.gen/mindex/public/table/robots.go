//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Robots = newRobotsTable("public", "robots", "")

type robotsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	EntityID  postgres.ColumnString
	UploadID  postgres.ColumnString
	Data      postgres.ColumnString
	Scraped   postgres.ColumnBool
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type RobotsTable struct {
	robotsTable

	EXCLUDED robotsTable
}

// AS creates new RobotsTable with assigned alias
func (a RobotsTable) AS(alias string) *RobotsTable {
	return newRobotsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RobotsTable with assigned schema name
func (a RobotsTable) FromSchema(schemaName string) *RobotsTable {
	return newRobotsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RobotsTable with assigned table prefix
func (a RobotsTable) WithPrefix(prefix string) *RobotsTable {
	return newRobotsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RobotsTable with assigned table suffix
func (a RobotsTable) WithSuffix(suffix string) *RobotsTable {
	return newRobotsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRobotsTable(schemaName, tableName, alias string) *RobotsTable {
	return &RobotsTable{
		robotsTable: newRobotsTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newRobotsTableImpl("", "excluded", ""),
	}
}

func newRobotsTableImpl(schemaName, tableName, alias string) robotsTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		EntityIDColumn  = postgres.StringColumn("entity_id")
		UploadIDColumn  = postgres.StringColumn("upload_id")
		DataColumn      = postgres.StringColumn("data")
		ScrapedColumn   = postgres.BoolColumn("scraped")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, EntityIDColumn, UploadIDColumn, DataColumn, ScrapedColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{EntityIDColumn, UploadIDColumn, DataColumn, ScrapedColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns  = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return robotsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		EntityID:  EntityIDColumn,
		UploadID:  UploadIDColumn,
		Data:      DataColumn,
		Scraped:   ScrapedColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
