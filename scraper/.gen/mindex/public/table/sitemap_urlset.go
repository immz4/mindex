//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SitemapUrlset = newSitemapUrlsetTable("public", "sitemap_urlset", "")

type sitemapUrlsetTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	EntityID     postgres.ColumnString
	UploadID     postgres.ColumnString
	RobotsID     postgres.ColumnString
	OriginID     postgres.ColumnString
	URL          postgres.ColumnString
	LastModified postgres.ColumnTimestampz
	ChangeFreq   postgres.ColumnString
	Scraped      postgres.ColumnBool
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type SitemapUrlsetTable struct {
	sitemapUrlsetTable

	EXCLUDED sitemapUrlsetTable
}

// AS creates new SitemapUrlsetTable with assigned alias
func (a SitemapUrlsetTable) AS(alias string) *SitemapUrlsetTable {
	return newSitemapUrlsetTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SitemapUrlsetTable with assigned schema name
func (a SitemapUrlsetTable) FromSchema(schemaName string) *SitemapUrlsetTable {
	return newSitemapUrlsetTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SitemapUrlsetTable with assigned table prefix
func (a SitemapUrlsetTable) WithPrefix(prefix string) *SitemapUrlsetTable {
	return newSitemapUrlsetTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SitemapUrlsetTable with assigned table suffix
func (a SitemapUrlsetTable) WithSuffix(suffix string) *SitemapUrlsetTable {
	return newSitemapUrlsetTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSitemapUrlsetTable(schemaName, tableName, alias string) *SitemapUrlsetTable {
	return &SitemapUrlsetTable{
		sitemapUrlsetTable: newSitemapUrlsetTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newSitemapUrlsetTableImpl("", "excluded", ""),
	}
}

func newSitemapUrlsetTableImpl(schemaName, tableName, alias string) sitemapUrlsetTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		EntityIDColumn     = postgres.StringColumn("entity_id")
		UploadIDColumn     = postgres.StringColumn("upload_id")
		RobotsIDColumn     = postgres.StringColumn("robots_id")
		OriginIDColumn     = postgres.StringColumn("origin_id")
		URLColumn          = postgres.StringColumn("url")
		LastModifiedColumn = postgres.TimestampzColumn("last_modified")
		ChangeFreqColumn   = postgres.StringColumn("change_freq")
		ScrapedColumn      = postgres.BoolColumn("scraped")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, EntityIDColumn, UploadIDColumn, RobotsIDColumn, OriginIDColumn, URLColumn, LastModifiedColumn, ChangeFreqColumn, ScrapedColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{EntityIDColumn, UploadIDColumn, RobotsIDColumn, OriginIDColumn, URLColumn, LastModifiedColumn, ChangeFreqColumn, ScrapedColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns     = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return sitemapUrlsetTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		EntityID:     EntityIDColumn,
		UploadID:     UploadIDColumn,
		RobotsID:     RobotsIDColumn,
		OriginID:     OriginIDColumn,
		URL:          URLColumn,
		LastModified: LastModifiedColumn,
		ChangeFreq:   ChangeFreqColumn,
		Scraped:      ScrapedColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
