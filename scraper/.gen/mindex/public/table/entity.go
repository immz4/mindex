//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Entity = newEntityTable("public", "entity", "")

type entityTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	Name      postgres.ColumnString
	URL       postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type EntityTable struct {
	entityTable

	EXCLUDED entityTable
}

// AS creates new EntityTable with assigned alias
func (a EntityTable) AS(alias string) *EntityTable {
	return newEntityTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EntityTable with assigned schema name
func (a EntityTable) FromSchema(schemaName string) *EntityTable {
	return newEntityTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EntityTable with assigned table prefix
func (a EntityTable) WithPrefix(prefix string) *EntityTable {
	return newEntityTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EntityTable with assigned table suffix
func (a EntityTable) WithSuffix(suffix string) *EntityTable {
	return newEntityTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEntityTable(schemaName, tableName, alias string) *EntityTable {
	return &EntityTable{
		entityTable: newEntityTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newEntityTableImpl("", "excluded", ""),
	}
}

func newEntityTableImpl(schemaName, tableName, alias string) entityTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		NameColumn      = postgres.StringColumn("name")
		URLColumn       = postgres.StringColumn("url")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, NameColumn, URLColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{NameColumn, URLColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns  = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return entityTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		URL:       URLColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
